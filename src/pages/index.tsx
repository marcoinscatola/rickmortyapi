import { requestCharactersPage } from "@/features/characters";
import { CharacterEntity } from "@/features/characters";
import { createStore, RootState, useAppDispatch } from "@/store";
import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { Character } from "./Character";

interface HomePageProps {
  characters?: CharacterEntity[];
  error?: string | Error;
  initialState?: RootState;
}

const Home: NextPage<{ characters: CharacterEntity[] }> = (props) => {
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>
        {props.characters.map(({ id }) => (
          <Character id={id} key={id} />
        ))}
      </main>

      <footer></footer>
    </div>
  );
};

export const getStaticProps: GetStaticProps<
  HomePageProps,
  { page: string }
> = async (ctx) => {
  const page = ctx.params?.page ?? "1";
  const store = createStore();
  const res = await store.dispatch(requestCharactersPage(page));
  if (res.meta.requestStatus === "fulfilled") {
    return {
      props: {
        characters: res.payload as CharacterEntity[],
        initialState: store.getState(),
      },
    };
  } else {
    return {
      props: {
        error: res.payload as Error | string,
      },
    };
  }
};

export const getStaticPaths: GetStaticPaths<{ page: string }> = (ctx) => {
  return {
    paths: [
      {
        params: {
          page: "1",
        },
      },
    ],
    fallback: "blocking",
  };
};

export default Home;
